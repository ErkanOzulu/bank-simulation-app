Adding validations to our Bank Simulation App.

1.we are suppose to add validation dependency to our pom.xml file
     <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

2.Use needed annotations for fields validation of your models/Pojos

    private UUID id;
    @NotNull
    @Positive
    private BigDecimal balance;
    @NotNull
    private AccountType accountType;
    private Date creationDate;
    @NotNull
    private Long userId;
    private AccountStatus accountStatus;

TASK
3.We need to create the file (message.properties) under the resource package
    #property names
    account.balance= Balance
    account.userId = User ID
    account.accountType = Account Type


    #messages
    NotNull.account.balance = {0} cannot be null.
    Positive.account.balance = {0} cannot be negative number.
    NotNull.account.userId = {0} cannot be null.
    NotNull.account.accountType = {0} cannot be null.
4.Update the correct method in the controller to make validation work

@PostMapping("/create")
    public String createAccount(@Valid @ModelAttribute("account") Account account, BindingResult bindingResult,Model model){
        if(bindingResult.hasErrors()){

            model.addAttribute("accountTypes", AccountType.values());
            return "account/create-account";
        }
        System.out.println(account);
        accountService.createNewAccount(account.getBalance(),new Date(),account.getAccountType(),account.getUserId());
        return "redirect:/index";
    }

    5.Update view/html files to display errors.

    <span th:if="${#fields.hasErrors('userId')}">
      <ul class="alert alert-danger">
          <li th:each="err :${#fields.errors('userId')}" th:text="${err}"></li>
      </ul>
    </span>


    -----

Bank Simulation App - ORM

1. update pom.xml adding orm and database dependecies
    -Spring Data Jpa
    -Postgres Driver
    -Modal Mapper

2.Create bank-simulation database and connect through intellij

3.update application.properties file with adding database information

4.change model package to dto
    -update class names to AccountDTO, Transaction DTO
    -change annotation from @Data,@Builder to
        -getter
        -setter
        -allArgConstructor
        -noArgConstructor
    -change AccountDTO id from UUID to Long
    -change sender and receiver UUID to AccountDTO in the Transaction DTO class(comment out NotNull annotation first)

5.Find builders in the controller and update them

    Account Controller  - new AccountDTO();
    Transaction Controller - new TransactionDTO

        AccountDTO sender = accountService.retrieveById(transactionDTO.getSender().getId());
        AccountDTO receiver = accountService.retrieveById(transactionDTO.getReceiver().getId());

        added getId() for these methods parameters.

6. Update account and transaction service interface UUID fields to Long with Type Migration

7.Update implementation classes builders to noArg constructor for now (temporary)
    -both createNewAccount and makeTransfer methods

8.Create entity package
    -Account
    -Transaction
        add needed annotations (enum,date,pk)
        table names "accounts" and "transactions"
    -define the relations(oneToOne,manyToOne etc)

9.Run the application (2 times) to see if the tables are created

10.Update Account and Transaction Repository
    -change the class to interface
    -extend JpaRepo
    -change @component to @repository

11.Start updating services
    #listAllAccount
    #createNewAccount
    #deleteAccount
    #ActiveAccount
    #findAccountById
    - nw logic
    #listAllActiveAccount

12.updating Transaction Service
    added transactionMapper
    added accountService
    removed accountRepository

    #findAllTransaction
    #findLast10Transaction
    #findTransactionListByAccountId
    #MakeTransfer
        -executeBalance














